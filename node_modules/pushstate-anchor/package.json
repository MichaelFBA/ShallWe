{
  "name": "pushstate-anchor",
  "description": "Extend the <a> tag with history.pushState()",
  "version": "0.4.2",
  "homepage": "https://github.com/erikringsmuth/pushstate-anchor",
  "repository": {
    "type": "git",
    "url": "https://github.com/erikringsmuth/pushstate-anchor.git"
  },
  "main": "./src/pushstate-anchor.js",
  "license": "MIT",
  "scripts": {
    "test": "node node_modules/gulp/bin/gulp.js ci"
  },
  "devDependencies": {
    "gulp": "^3.9.1",
    "gulp-inline": "0.1.1",
    "gulp-jshint": "^2.0.1",
    "gulp-rename": "^1.2.0",
    "gulp-uglify": "^1.5.3",
    "jshint-stylish": "^2.2.0"
  },
  "keywords": [
    "web-components",
    "pushstate",
    "history"
  ],
  "readme": "## &lt;a is=\"pushstate-anchor\"&gt;\n> Extend the `<a>` tag with `history.pushState()`\n>\n> Simpified version of the [html5-history-anchor](https://github.com/erikringsmuth/html5-history-anchor)\n\nA link from 1992.\n```html\n<a href=\"/home\">Home</a>\n```\n\nNow using `pushState()`.\n```html\n<a is=\"pushstate-anchor\" href=\"/home\">Home</a>\n```\n\nA complete example.\n```html\n<a is=\"pushstate-anchor\" href=\"/home\"\n   title=\"Home Page\" state='{\"message\":\"New State!\"}'>Home</a>\n```\n\nClicking this link calls the HTML5 history API.\n```js\nwindow.history.pushState({message:'New State!'}, 'Home Page', '/home');\nwindow.dispatchEvent(new PopStateEvent('popstate', {\n  bubbles: false,\n  cancelable: false,\n  state: {message:'New State!'}\n}));\n```\n\n## Install\n[Download](https://github.com/erikringsmuth/pushstate-anchor/archive/master.zip) or run `bower install pushstate-anchor --save`\n\n## Import\n```html\n<link rel=\"import\" href=\"/bower_components/pushstate-anchor/pushstate-anchor.html\">\nor\n<script src=\"/bower_components/pushstate-anchor/pushstate-anchor.js\"></script>\n```\n\n## Notes\nThe [HTML5 history spec](http://www.w3.org/html/wg/drafts/html/master/browsers.html#the-history-interface) is a bit quirky. `history.pushState()` doesn't dispatch a `popstate` event or load a new page by itself. It was only meant to push state into history. This is an \"undo\" feature for single page applications. This is why you have to manually dispatch a `popstate` event. The `pushstate-anchor` will push the new state into history then dispatch a `popstate` event which you can use to load a new page with a router.\n\n## Build, Test, and Debug [![Build Status](https://travis-ci.org/erikringsmuth/pushstate-anchor.png?branch=master)](https://travis-ci.org/erikringsmuth/pushstate-anchor)\nSource files are under the `src` folder. The build process writes to the root directory. The easiest way to debug is to include the source script rather than the minified HTML import.\n```html\n<script src=\"/bower_components/pushstate-anchor/src/pushstate-anchor.js\"></script>\n```\n\nTo build:\n- Run `bower install` and `npm install` to install dev dependencies\n- Lint, build, and minify code changes with `gulp` (watch with `gulp watch`)\n- Start a static content server to run tests (node `http-server` or `python -m SimpleHTTPServer`)\n- Run unit tests in the browser (PhantomJS doesn't support Web Components) [http://localhost:8080/tests/SpecRunner.html](http://localhost:8080/tests/SpecRunner.html)\n- Manually run functional tests in the browser [http://localhost:8080/tests/functional-test-site/](http://localhost:8080/tests/functional-test-site/)\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/erikringsmuth/pushstate-anchor/issues"
  },
  "_id": "pushstate-anchor@0.4.2",
  "_shasum": "cf604c25cd697c3a09d81b9f4c3a2799eadd1649",
  "_resolved": "git+https://github.com/erikringsmuth/pushstate-anchor.git#1ca1dc3e2862ae26bd62f0e2b3e62622fa992a03",
  "_from": "pushstate-anchor@git+https://github.com/erikringsmuth/pushstate-anchor.git"
}
